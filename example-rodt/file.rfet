0;

 public Turn(x,y,vector,angle) = xy(turn(x, rotate(x, angle[1])*y, vector, angle)) ;

 private xy(x,y) = {x, y, x*y} ;

 private turn(x,y,vector,angle) = (x,y) * (rotate(vector, angle[0]) * rotate(x*y, angle[2]))^T ;

 # get a rotation matrix about the given vector for the given angle:
 private rotate ((u0, u1, u2), angle) =

             ( u0*u0*(1-cos(angle)) +    cos(angle) ,
               u0*u1*(1-cos(angle)) - u2*sin(angle) ,
               u0*u2*(1-cos(angle)) + u1*sin(angle) ),

             ( u1*u0*(1-cos(angle)) + u2*sin(angle) ,
               u1*u1*(1-cos(angle)) +    cos(angle) ,
               u1*u2*(1-cos(angle)) - u0*sin(angle) ),

             ( u2*u0*(1-cos(angle)) - u1*sin(angle) ,
               u2*u1*(1-cos(angle)) + u0*sin(angle) ,
               u2*u2*(1-cos(angle)) +    cos(angle) ) ;


 public zoomCamera(cmr, old) = old +  (cmr==FocusedCamera and not Mouse_Right and not Key_Ctrl) * MouseMotion[2] / 20 ;

 public moveCamera(cmr, old) = old + ((cmr==FocusedCamera and Key_Ctrl) ? (FocusedCamera.axes^T * (MouseMotion ./ (4, 4, 4))) : (0,0,0)) ;

 public turnCamera(cmr, old) = old +  (cmr==FocusedCamera and Mouse_Right) * (MouseMotion ./ PixelsPUL .* (-1, -1, 10)) ;


 private D = CameraDistance / PixelsPUL ;

 public moveObject(obj, old) = old + ((obj==FocusedObject and Key_Ctrl) ? (FocusedCamera.axes^T * (MouseMotion .* (D, D, 4))) : (0,0,0)) ;

 public turnObject(obj, old) = old +  (obj==FocusedObject and Mouse_Left) * (MouseMotion ./ PixelsPUL .* (10, -10, 10)) ;

